// photoHandler.js
import i18n from 'i18n';
import faceapi from 'face-api.js';
import canvas from 'canvas';
import 'dotenv/config';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import fetch from 'node-fetch';
import AWS from 'aws-sdk';
import { v4 as uuidv4 } from 'uuid';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

i18n.configure({
  locales: ['en', 'ru'], // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  directory: `${__dirname}/locales`, // –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–∞
  defaultLocale: 'ru', // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  objectNotation: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∫
});

faceapi.env.monkeyPatch({ Canvas: canvas.Canvas, Image: canvas.Image, ImageData: canvas.ImageData });
const MODEL_URL = './node_modules/face-api.js/weights';

const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    endpoint: 's3.aeza.cloud',
    s3ForcePathStyle: true,
  });

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
Promise.all([
    faceapi.nets.faceRecognitionNet.loadFromDisk(MODEL_URL),
    faceapi.nets.faceLandmark68Net.loadFromDisk(MODEL_URL),
    faceapi.nets.ssdMobilenetv1.loadFromDisk(MODEL_URL),
]).then(() => {
    console.log('–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
export async function handlePhoto (bot, currentUserState, i18n, msg, User, UserPhoto, Profile) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;
        const existingUser = await User.findOne({ telegramId: userId });
        console.log(msg);
        if (!msg.photo || msg.photo.length === 0) {
            const savedMessage = await bot.sendMessage(chatId, i18n.__('wrong_photo_format'));
            setTimeout(async () => {
            try {
                await bot.deleteMessage(chatId, savedMessage.message_id);
            } catch (error) {
                console.error('Error:', error);
            }
            }, 3000);
            console.error('Invalid message format. Missing or empty photo property.');
            return;
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        const processingMessage = await bot.sendAnimation(chatId, 'https://dating-storage.s3.aeza.cloud/gif/bean-mr.gif', {
            caption: i18n.__('photo_checking_message'),
            reply_markup: {
                remove_keyboard: true,
            },
            protect_content: true,
            });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photo = msg.photo[msg.photo.length - 1];
        const fileId = photo.file_id;
        console.log('–§–æ—Ç–æ', msg.photo);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const file = await bot.getFile(fileId);
        const photoUrl = `https://api.telegram.org/file/bot${process.env.bot_token}/${file.file_path}`;
        const response = await fetch(photoUrl);
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ S3
        const { filePath, uniquePhotoId } = await uploadPhotoToS3(buffer);

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const img = await canvas.loadImage(photoUrl);

        // –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        const detections = await faceapi.detectAllFaces(img, new faceapi.SsdMobilenetv1Options({ minConfidence: 0.2 })).withFaceLandmarks().withFaceDescriptors();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏—Ü–∞
        if (detections.length === 0) {
            // –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ª–∏—Ü–∞
            const rejectionMessage = await bot.sendMessage(chatId, i18n.__('photo_rejected_message'));

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            if (processingMessage.message_id) {
                await bot.deleteMessage(chatId, processingMessage.message_id);
            }
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                try {
                    await bot.deleteMessage(chatId, rejectionMessage.message_id);
                    await bot.sendMessage(chatId, i18n.__('request_photo_message_text'), {
                        reply_markup: {
                          keyboard: i18n.__('back_button'),
                          resize_keyboard: true
                        }});
                } catch (error) {
                    console.error('Error:', error);
                }
            }, 3000);
            return;
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ usersPhotos
            let userPhoto = await UserPhoto.findOne({ user_id: existingUser._id });
            if (!userPhoto) {
                userPhoto = new UserPhoto({ user_id: existingUser._id, photos: [] });
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –º–∞—Å—Å–∏–≤
            userPhoto.photos.push({
                filename: `${uniquePhotoId}.jpg`,
                path: filePath,
                size: buffer.length,
                uploadDate: new Date(),
                verifiedPhoto: detections.length > 0, // true –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            });
            await userPhoto.save();

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ profilePhoto –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ profiles
            const lastPhotoId = userPhoto.photos[userPhoto.photos.length - 1]._id;
            const updatedProfile = await Profile.findOneAndUpdate(
                { user_id: existingUser._id },
                { profilePhoto: {
                    photoId: lastPhotoId,
                    photoPath: filePath,
                    uploadDate: new Date(),
                    },
                },
                { new: true }
            );
            console.log('User profilePhoto updated', updatedProfile );

            // –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å –ª–∏—Ü–æ
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è photo_checking_message
            if (processingMessage.message_id) {
                await bot.deleteMessage(chatId, processingMessage.message_id);
            }
            // –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è photo_verified_message –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            const verifiedMessage = await bot.sendMessage(chatId, i18n.__('photo_verified_message'));
            if (existingUser.globalUserState === 'registration_process') {
                setTimeout(async () => {
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è photo_verified_message
                    try {
                        const agreementLink = 'https://telegra.ph/Afreement-01-11'; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
                        await bot.deleteMessage(chatId, verifiedMessage.message_id);
                        await bot.sendMessage(chatId, i18n.__('confirm_agreement_message'), {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: i18n.__('confirm_agreement_link'), url: agreementLink }],
                                    [{ text: i18n.__('confirm_agreement_button'), callback_data: 'confirm_agreement_button' }],
                                ],
                            },
                        });
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }, 2000);
                currentUserState.set(userId, 'confirm_agreement');

            } else if (existingUser.globalUserState === 'active') {
                
                setTimeout(async () => {
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è photo_verified_message
                    try {
                        await bot.deleteMessage(chatId, verifiedMessage.message_id);
                        currentUserState.set(userId, 'my_profile');
                        let aboutMeText = updatedProfile.aboutMe ? `<blockquote><i>${updatedProfile.aboutMe}</i></blockquote>` : '';
                        await bot.sendPhoto(chatId, updatedProfile.profilePhoto.photoPath, {
                            caption: `${updatedProfile.profileName}, ${updatedProfile.age}\n üåç${updatedProfile.location.locality}, ${updatedProfile.location.country}\n${i18n.__('myprofile_gender_message')} ${updatedProfile.gender}\n\n${aboutMeText}`,
                            reply_markup: {
                              keyboard: i18n.__('myprofile_buttons'),
                              resize_keyboard: true
                            },
                            parse_mode: 'HTML',
                            protect_content: true,
                          });
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }, 3000);
            }
    }
};

export default { handlePhoto };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä S3
async function uploadPhotoToS3(buffer) {
    const uniquePhotoId = uuidv4();
    const s3Key = `photos/${uniquePhotoId}.jpg`;
    const s3Params = {
        Bucket: 'dating-storage',
        Key: s3Key,
        Body: buffer,
        ContentType: 'image/jpeg',
        ACL: 'public-read', // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ACL –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    };

    try {
        await s3.upload(s3Params).promise();
        console.log('Photo successfully uploaded to S3');
        return { filePath: `https://dating-storage.s3.aeza.cloud/${s3Key}`, uniquePhotoId };
    } catch (error) {
        console.error('Error uploading photo to S3:', error);
        throw new Error('Error uploading photo to S3');
    }
}